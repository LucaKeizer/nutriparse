# Generated by Django 5.2.1 on 2025-05-23 09:26

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FoodGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MeasurementUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('abbreviation', models.CharField(max_length=10)),
                ('type', models.CharField(choices=[('volume', 'Volume'), ('weight', 'Weight'), ('count', 'Count')], max_length=10)),
            ],
            options={
                'unique_together': {('name', 'type')},
            },
        ),
        migrations.CreateModel(
            name='NutritionData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('calories', models.FloatField(help_text='kcal per 100g')),
                ('protein', models.FloatField(help_text='grams per 100g')),
                ('carbohydrates', models.FloatField(help_text='grams per 100g')),
                ('fat', models.FloatField(help_text='grams per 100g')),
                ('fiber', models.FloatField(default=0, help_text='grams per 100g')),
                ('sugar', models.FloatField(default=0, help_text='grams per 100g')),
                ('vitamin_a', models.FloatField(default=0, help_text='µg per 100g')),
                ('vitamin_c', models.FloatField(default=0, help_text='mg per 100g')),
                ('vitamin_d', models.FloatField(default=0, help_text='µg per 100g')),
                ('vitamin_e', models.FloatField(default=0, help_text='mg per 100g')),
                ('vitamin_k', models.FloatField(default=0, help_text='µg per 100g')),
                ('thiamin', models.FloatField(default=0, help_text='mg per 100g')),
                ('riboflavin', models.FloatField(default=0, help_text='mg per 100g')),
                ('niacin', models.FloatField(default=0, help_text='mg per 100g')),
                ('vitamin_b6', models.FloatField(default=0, help_text='mg per 100g')),
                ('folate', models.FloatField(default=0, help_text='µg per 100g')),
                ('vitamin_b12', models.FloatField(default=0, help_text='µg per 100g')),
                ('calcium', models.FloatField(default=0, help_text='mg per 100g')),
                ('iron', models.FloatField(default=0, help_text='mg per 100g')),
                ('magnesium', models.FloatField(default=0, help_text='mg per 100g')),
                ('phosphorus', models.FloatField(default=0, help_text='mg per 100g')),
                ('potassium', models.FloatField(default=0, help_text='mg per 100g')),
                ('sodium', models.FloatField(default=0, help_text='mg per 100g')),
                ('zinc', models.FloatField(default=0, help_text='mg per 100g')),
                ('cholesterol', models.FloatField(default=0, help_text='mg per 100g')),
                ('saturated_fat', models.FloatField(default=0, help_text='grams per 100g')),
                ('monounsaturated_fat', models.FloatField(default=0, help_text='grams per 100g')),
                ('polyunsaturated_fat', models.FloatField(default=0, help_text='grams per 100g')),
                ('trans_fat', models.FloatField(default=0, help_text='grams per 100g')),
                ('common_name', models.CharField(blank=True, max_length=255)),
                ('search_terms', models.TextField(blank=True, help_text='Comma-separated search terms')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('food_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foods', to='nutrition.foodgroup')),
            ],
            options={
                'verbose_name_plural': 'Nutrition Data',
            },
        ),
        migrations.CreateModel(
            name='FoodConversion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grams_per_unit', models.FloatField(help_text='Weight in grams for one unit')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.measurementunit')),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversions', to='nutrition.nutritiondata')),
            ],
        ),
        migrations.AddIndex(
            model_name='nutritiondata',
            index=models.Index(fields=['name'], name='nutrition_n_name_13bdc7_idx'),
        ),
        migrations.AddIndex(
            model_name='nutritiondata',
            index=models.Index(fields=['common_name'], name='nutrition_n_common__57ff93_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='foodconversion',
            unique_together={('food', 'unit')},
        ),
    ]
